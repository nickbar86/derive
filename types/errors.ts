/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type RPCError = RPCError1
/**
 * An enum type for RPC error codes
 */
export type RPCErrorCode =
  | Ok
  | RateLimitExceeded
  | ConcurrentWsClientExceeded
  | ParseError
  | InvalidRequest
  | MethodNotFound
  | InvalidParams
  | InternalError
  | DatabaseError
  | DjangoError
  | DuplicateCashAsset
  | OptionBalanceForSettlementNotFound
  | MoreThanOneOptionBalanceForSettlementFound
  | NoVacantInstruments
  | InvalidServiceType
  | LatchNotRetained
  | FeedsNotFound
  | InvalidOptionInstrumentDeactivation
  | InvalidHeartbeatInterval
  | InvalidMakerOrTakerFee
  | OptionSettlementPriceCouldNotBeSaved
  | CannotSaveSettlementPriceToNonOptionAsset
  | CounterpartyInsufficientFunds
  | CounterpartyMaxFeeTooLow
  | OrderConfirmationTimeout
  | ManagerNotFound
  | AssetNotErc20
  | TransferWalletMismatch
  | SameAccountTransfer
  | MultipleCurrenciesNotSupported
  | MaxSubaccountsPerWallet
  | MaxSessionKeysPerWallet
  | MaxAssetsPerSubaccount
  | MaxExpiriesPerSubaccount
  | TransferMustBeToNonZeroSubaccount
  | InsufficientFunds
  | OrderRejectedFromQueue
  | OrderAlreadyCancelled
  | OrderAlreadyFilled
  | OrderAlreadyExpired
  | OrderDoesNotExist
  | SelfCrossingDisallowed
  | PostOnlyReject
  | ZeroLiquidityForTakerOrder
  | PostOnlyInvalidOrderType
  | OrderInvalidSignatureExpiry
  | OrderInvalidAmount
  | OrderInvalidLimitPrice
  | FokNotFilled
  | MmpFrozen
  | OrderAlreadyConsumed
  | OrderNonUniqueNonce
  | OrderInvalidNonceDate
  | TooManyOrders
  | NegativeErc20Balance
  | InstrumentNotLive
  | RejectTimestampExceeded
  | MaxFeeTooLow
  | ReduceOnlyNotSupported
  | ReduceOnlyReject
  | TransferReject
  | AssetNotFound
  | InstrumentNotFound
  | CurrencyNotFound
  | InvalidChannels
  | AccountNotFound
  | SubaccountNotFound
  | UseDeregisterSessionKey
  | SessionKeyExpiryTooSoon
  | SessionKeyAlreadyRegistered
  | SessionKeyTaken
  | AddressIsNotChecksum
  | StringIsNotEthereumAddress
  | InvalidSignature
  | InvalidNonce
  | SignedTxAndFunctionNameDoNotMatch
  | SignedTxAndContractAddressDoNotMatch
  | SignedTxAndFunctionParamNamesDoNotMatch
  | SignedTxAndFunctionParamValuesDoNotMatch
  | AuthHeaderMismatch
  | AuthMissingWalletHeader
  | ChannelNotAuthorized
  | InvalidSigner
  | InvalidChainId
  | PrivateRequestMissingWalletOrSubaccount
  | SessionKeyNotFound
  | RegionRestricted
  | AccountDisabled
  | InvalidSentinelAuthorization

/**
 * An RPC error object that will be returned if the RPC call fails
 */
export interface RPCError1 {
  id: number | string
  error: RPCErrorCode
}
/**
 * No error (typically omitted from a successful response)
 */
export interface Ok {
  code: 0
  message: ''
  data?: any
}
/**
 * Check per IP rate limits for non-auth requests or your account details for auth requests
 */
export interface RateLimitExceeded {
  code: -32000
  message: 'Rate limit exceeded'
  data?: any
}
/**
 * Check per IP max concurrent clients for non-auth requests or your account details for auth requests
 */
export interface ConcurrentWsClientExceeded {
  code: -32100
  message: 'Number of concurrent websocket clients limit exceeded'
  data?: any
}
/**
 * Invalid JSON was received by the server.<br />An error occurred on the server while parsing the JSON text.
 */
export interface ParseError {
  code: -32700
  message: 'Parse error'
  data?: any
}
/**
 * The JSON sent is not a valid Request object.
 */
export interface InvalidRequest {
  code: -32600
  message: 'Invalid Request'
  data?: any
}
/**
 * The method does not exist / is not available.
 */
export interface MethodNotFound {
  code: -32601
  message: 'Method not found'
  data?: any
}
/**
 * Invalid method parameter(s).
 */
export interface InvalidParams {
  code: -32602
  message: 'Invalid params'
  data?: any
}
/**
 * Internal JSON-RPC error.
 */
export interface InternalError {
  code: -32603
  message: 'Internal error'
  data?: any
}
/**
 * Database error, see data for details.
 */
export interface DatabaseError {
  code: 8000
  message: 'Database error'
  data?: any
}
/**
 * Django error, see data for details.
 */
export interface DjangoError {
  code: 8001
  message: 'Django error'
  data?: any
}
/**
 * Can only create 1 cash asset in the db.
 */
export interface DuplicateCashAsset {
  code: 8002
  message: 'Duplicate cash asset'
  data?: any
}
/**
 * Quote delta was debited but option balance was not adjusted
 */
export interface OptionBalanceForSettlementNotFound {
  code: 8003
  message: 'No open option balance for the settlement event was not found'
  data?: any
}
/**
 * Quote delta was debited but option balance was not adjusted
 */
export interface MoreThanOneOptionBalanceForSettlementFound {
  code: 8004
  message: 'More than one option balance for the settlement event was found'
  data?: any
}
/**
 * Latching failed because no vacant instruments were found.
 */
export interface NoVacantInstruments {
  code: 8100
  message: 'No vacant instruments'
  data?: any
}
/**
 * Provided service type is invalid.
 */
export interface InvalidServiceType {
  code: 8101
  message: 'Invalid service type'
  data?: any
}
/**
 * Latch was not retained by the pod.
 */
export interface LatchNotRetained {
  code: 8102
  message: 'Latch not retained'
  data?: any
}
/**
 * Error querying feeds from the database, see data for details
 */
export interface FeedsNotFound {
  code: 8200
  message: 'Feeds not found'
  data?: any
}
/**
 * Option instrument deactivation must be at-least MAX_HEARTBEAT_INTERVAL before option_details.expiry
 */
export interface InvalidOptionInstrumentDeactivation {
  code: 8300
  message: 'Scheduled deactivation too late'
  data?: any
}
/**
 * Must be within MIN_HEARTBEAT_INTERVAL and MAX_HEARTBEAT_INTERVAL
 */
export interface InvalidHeartbeatInterval {
  code: 8301
  message: 'Engine or publisher heartbeat inervals is invalid'
  data?: any
}
/**
 * Maker fee must be less than or equal to taker fee and both must be < 0.05
 */
export interface InvalidMakerOrTakerFee {
  code: 8303
  message: 'The maker and/or taker fees are invalid'
  data?: any
}
/**
 * During option expiry listener, settlement price could not be retreived
 */
export interface OptionSettlementPriceCouldNotBeSaved {
  code: 8402
  message: 'Option settlement price could not be saved'
  data?: any
}
/**
 * You should not be attempting to save settlement price to Option asset details
 */
export interface CannotSaveSettlementPriceToNonOptionAsset {
  code: 8403
  message: 'Option settlement price cannot be saved to a non-option asset'
  data?: any
}
/**
 * Counterparty had insufficient funds to fill the order and order re-submission was not possible.
 */
export interface CounterpartyInsufficientFunds {
  code: 8500
  message: 'Counterparty insufficient funds'
  data?: any
}
/**
 * Max fee for one or more counterparties is too low
 */
export interface CounterpartyMaxFeeTooLow {
  code: 8501
  message: 'Max fee for one or more counterparties is too low'
  data?: any
}
/**
 * Order confirmation timed out but order status is unknown. Please check status of open orders.
 */
export interface OrderConfirmationTimeout {
  code: 9000
  message: 'Order confirmation timeout'
  data?: any
}
/**
 * The requested margin type does not exist.
 */
export interface ManagerNotFound {
  code: 10000
  message: 'Manager not found'
  data?: any
}
/**
 * The requested asset is not an ERC20 token and therefore cannot be deposited/withdrawn/transferred.
 */
export interface AssetNotErc20 {
  code: 10001
  message: 'Asset is not an ERC20 token'
  data?: any
}
/**
 * Transfers can only be made to subaccounts under the same wallet.
 */
export interface TransferWalletMismatch {
  code: 10002
  message: 'Sender and recipient wallet do not match'
  data?: any
}
/**
 * Transfers can only be made to a different subaccount id.
 */
export interface SameAccountTransfer {
  code: 10003
  message: 'Sender and recipient subaccount IDs are the same'
  data?: any
}
/**
 * Only standard margin accounts may hold assets of multiple currencies.
 */
export interface MultipleCurrenciesNotSupported {
  code: 10004
  message: 'Multiple currencies not supported'
  data?: any
}
/**
 * Withdraw any unused subaccounts to add new ones.
 */
export interface MaxSubaccountsPerWallet {
  code: 10005
  message: 'Maximum number of subaccounts per wallet reached'
  data?: any
}
/**
 * Deactivate any unused session keys to add new ones.
 */
export interface MaxSessionKeysPerWallet {
  code: 10006
  message: 'Maximum number of session keys per wallet reached'
  data?: any
}
/**
 * Number of assets in a subaccount is limited by the on-chain constraints.
 */
export interface MaxAssetsPerSubaccount {
  code: 10007
  message: 'Maximum number of assets per subaccount reached'
  data?: any
}
/**
 * Number of expiries in a portfolio margin subaccount is limited by the on-chain constraints.
 */
export interface MaxExpiriesPerSubaccount {
  code: 10008
  message: 'Maximum number of expiries per subaccount reached'
  data?: any
}
/**
 * Transfers must be made to registerred non-zero subaccounts.
 */
export interface TransferMustBeToNonZeroSubaccount {
  code: 10009
  message: 'Recipient subaccount ID of the transfer cannot be 0'
  data?: any
}
/**
 * Insufficient funds to place order.
 */
export interface InsufficientFunds {
  code: 11000
  message: 'Insufficient funds'
  data?: any
}
/**
 * Order did not reach the queue, matching engine might be down, or order was in the queue for too long.
 */
export interface OrderRejectedFromQueue {
  code: 11002
  message: 'Order rejected from queue'
  data?: any
}
/**
 * Order is already cancelled.
 */
export interface OrderAlreadyCancelled {
  code: 11003
  message: 'Already cancelled'
  data?: any
}
/**
 * Order is already filled.
 */
export interface OrderAlreadyFilled {
  code: 11004
  message: 'Already filled'
  data?: any
}
/**
 * Order is already expired.
 */
export interface OrderAlreadyExpired {
  code: 11005
  message: 'Already expired'
  data?: any
}
/**
 * Order does not exist.
 */
export interface OrderDoesNotExist {
  code: 11006
  message: 'Does not exist'
  data?: any
}
/**
 * Order was rejected because it crossed with another order placed by the same user.
 */
export interface SelfCrossingDisallowed {
  code: 11007
  message: 'Self-crossing disallowed'
  data?: any
}
/**
 * A post-only order was rejected because it would have matched with an existing order.
 */
export interface PostOnlyReject {
  code: 11008
  message: 'Post-only reject'
  data?: any
}
/**
 * A market or an IOC/FOK order was rejected because there was no liquidity within the provided limit price.
 */
export interface ZeroLiquidityForTakerOrder {
  code: 11009
  message: 'Zero liquidity for market or IOC/FOK order'
  data?: any
}
/**
 * A post-only order was rejected because it was not a limit order.
 */
export interface PostOnlyInvalidOrderType {
  code: 11010
  message: 'Post-only invalid order type'
  data?: any
}
/**
 * Order expiry is too short or is beyond expiry (for options only).
 */
export interface OrderInvalidSignatureExpiry {
  code: 11011
  message: 'Invalid signature expiry'
  data?: any
}
/**
 * Order amount is invalid, see data for details.
 */
export interface OrderInvalidAmount {
  code: 11012
  message: 'Invalid amount'
  data?: any
}
/**
 * Order limit price is invalid, see data for details.
 */
export interface OrderInvalidLimitPrice {
  code: 11013
  message: 'Invalid limit price'
  data?: any
}
/**
 * A fill-or-kill order was not filled.
 */
export interface FokNotFilled {
  code: 11014
  message: 'Fill-or-kill not filled'
  data?: any
}
/**
 * An order was rejected because the market maker protections were triggered.
 */
export interface MmpFrozen {
  code: 11015
  message: 'MMP frozen'
  data?: any
}
/**
 * Order is already consumed (Filled/expired/rejected).
 */
export interface OrderAlreadyConsumed {
  code: 11016
  message: 'Already consumed'
  data?: any
}
/**
 * This nonce has already been used, please use a new nonce.
 */
export interface OrderNonUniqueNonce {
  code: 11017
  message: 'Non unique nonce'
  data?: any
}
/**
 * First 10 digits of nonce must be a UTC sec timestamp within 1 day of the true UTC timestamp.
 */
export interface OrderInvalidNonceDate {
  code: 11018
  message: 'Invalid nonce date'
  data?: any
}
/**
 * Too many open orders for this subaccount.
 */
export interface TooManyOrders {
  code: 11019
  message: 'Open orders limit exceeded'
  data?: any
}
/**
 * Wrapped ERC20 balances cannot be negative.
 */
export interface NegativeErc20Balance {
  code: 11020
  message: 'Negative ERC20 balance'
  data?: any
}
/**
 * Instrument has either been deactivated or expired (if an Option)
 */
export interface InstrumentNotLive {
  code: 11021
  message: 'Instrument is not live'
  data?: any
}
/**
 * Order was rejected because it reached the engine after the supplied `reject_timestamp`.
 */
export interface RejectTimestampExceeded {
  code: 11022
  message: 'Reject timestamp exceeded'
  data?: any
}
/**
 * Max fee order param must always be >= 2 x max(taker, maker) x spot_price. If the order crosses the book, it must be >= 2 x max(taker, maker) x spot_price + base_fee / max(fill_amount, min_amount).
 */
export interface MaxFeeTooLow {
  code: 11023
  message: 'Max fee order param is too low'
  data?: any
}
/**
 * Reduce only orders have to be market orders or non-resting limit orders (IOC or FOK).
 */
export interface ReduceOnlyNotSupported {
  code: 11024
  message: 'Reduce only not supported with this time in force'
  data?: any
}
/**
 * A reduce-only order was rejected because it would have increased position size.
 */
export interface ReduceOnlyReject {
  code: 11025
  message: 'Reduce only reject'
  data?: any
}
/**
 * A transfer was rejected because it would have increased maker subaccount position size.
 */
export interface TransferReject {
  code: 11026
  message: 'Transfer reject'
  data?: any
}
/**
 * Requested asset does not exist.
 */
export interface AssetNotFound {
  code: 12000
  message: 'Asset not found'
  data?: any
}
/**
 * Requested instrument does not exist.
 */
export interface InstrumentNotFound {
  code: 12001
  message: 'Instrument not found'
  data?: any
}
/**
 * Requested currency does not exist.
 */
export interface CurrencyNotFound {
  code: 12002
  message: 'Currency not found'
  data?: any
}
/**
 * All channels in the subscribe request were invalid.
 */
export interface InvalidChannels {
  code: 13000
  message: 'Invalid channels'
  data?: any
}
/**
 * Requested wallet does not exist.
 */
export interface AccountNotFound {
  code: 14000
  message: 'Account not found'
  data?: any
}
/**
 * Requested subaccount does not belong to a registered wallet.
 */
export interface SubaccountNotFound {
  code: 14001
  message: 'Subaccount not found'
  data?: any
}
/**
 * Must use the deregisterSessionKey RPC route to reduce expiry.
 */
export interface UseDeregisterSessionKey {
  code: 14008
  message: 'Cannot reduce expiry using registerSessionKey RPC route'
  data?: any
}
/**
 * Increase the expiry_sec.
 */
export interface SessionKeyExpiryTooSoon {
  code: 14009
  message: 'Session key expiry must be > utc_now + 10 min'
  data?: any
}
/**
 * Requested session key is already registered for this account.
 */
export interface SessionKeyAlreadyRegistered {
  code: 14010
  message: 'Session key already registered for this account'
  data?: any
}
/**
 * Requested session key is already registered with another account.
 */
export interface SessionKeyTaken {
  code: 14011
  message: 'Session key already registered with another account'
  data?: any
}
/**
 * Requested address must be checksumed
 */
export interface AddressIsNotChecksum {
  code: 14012
  message: 'Address must be checksummed'
  data?: any
}
/**
 * String must be a valid ethereum address: e.g. 0xd3cda913deb6f67967b99d67acdfa1712c293601
 */
export interface StringIsNotEthereumAddress {
  code: 14013
  message: 'String is not a valid ethereum address'
  data?: any
}
/**
 * Address recovered from message and signature does not match the signer
 */
export interface InvalidSignature {
  code: 14014
  message: 'Signature invalid for message or transaction'
  data?: any
}
/**
 * Ensure the nonce is set correctly
 */
export interface InvalidNonce {
  code: 14015
  message: 'Transaction count for given wallet does not match provided nonce'
  data?: any
}
/**
 * Ensure that the right contract abi was used when generating the transaction
 */
export interface SignedTxAndFunctionNameDoNotMatch {
  code: 14016
  message: 'The provided signed raw transaction contains function name that does not match the expected function name'
  data?: any
}
/**
 * Ensure that the right contract address was used when generating the transaction
 */
export interface SignedTxAndContractAddressDoNotMatch {
  code: 14017
  message: 'The provided signed raw transaction contains contract address that does not match the expected contract address'
  data?: any
}
/**
 * Ensure that the right contract abi was used when generating the transaction
 */
export interface SignedTxAndFunctionParamNamesDoNotMatch {
  code: 14018
  message: 'The provided signed raw transaction contains function params that do not match any expected function params'
  data?: any
}
/**
 * Ensure that the signed function inputs match the ones provided in the request
 */
export interface SignedTxAndFunctionParamValuesDoNotMatch {
  code: 14019
  message: 'The provided signed raw transaction contains function param values that do not match the expected values'
  data?: any
}
/**
 * Ensure the X-LyraWallet header is set to match the requested subaccount_id or wallet
 */
export interface AuthHeaderMismatch {
  code: 14020
  message: 'The X-LyraWallet header does not match the requested subaccount_id or wallet'
  data?: any
}
/**
 * Ensure the X-LyraWallet header is included in the request
 */
export interface AuthMissingWalletHeader {
  code: 14021
  message: 'The X-LyraWallet header not provided'
  data?: any
}
/**
 * A private channel is not authorized for this websocket connection, or it was requested over a public method
 */
export interface ChannelNotAuthorized {
  code: 14022
  message: 'Subscription to a private channel failed'
  data?: any
}
/**
 * Address of the signer must be a wallet owner or registered session key
 */
export interface InvalidSigner {
  code: 14023
  message: 'Signer in on-chain related request is not wallet owner or registered session key'
  data?: any
}
/**
 * Refer to v2-docs for chain id for each deployment
 */
export interface InvalidChainId {
  code: 14024
  message: 'Chain ID must match the current roll up chain id'
  data?: any
}
/**
 * Ensure request params include a subaccount_id or wallet
 */
export interface PrivateRequestMissingWalletOrSubaccount {
  code: 14025
  message: 'The private request is missing a wallet or subaccount_id param'
  data?: any
}
/**
 * Requested session key does not exist.
 */
export interface SessionKeyNotFound {
  code: 14026
  message: 'Session key not found'
  data?: any
}
/**
 * You are in a restricted region that violates our terms of service. You may withdraw funds any time but deposits, transfers, orders are blocked
 */
export interface RegionRestricted {
  code: 16000
  message: 'You are in a restricted region that violates our terms of service.'
  data?: any
}
/**
 * Account is disabled due to compliance violations, please contact support to enable it.
 */
export interface AccountDisabled {
  code: 16001
  message: 'Account is disabled due to compliance violations, please contact support to enable it.'
  data?: any
}
/**
 * The sentinel authorization is invalid
 */
export interface InvalidSentinelAuthorization {
  code: 16100
  message: 'Sentinel authorization is invalid'
  data?: any
}
