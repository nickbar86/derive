/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Get ticker information (best bid / ask, instrument contraints, fees info, etc.) for a single instrument
 */
export type PublicGetTicker = PublicGetTickerJSONRPCSchema
export type HttpMethod = 'POST'
export type Method = 'public/get_ticker'
/**
 * Instrument name
 */
export type InstrumentName = string
/**
 * Minimum valid increment of order amount
 */
export type AmountStep = string
/**
 * Blockchain address of the base asset
 */
export type BaseAssetAddress = string
/**
 * Sub ID of the specific base asset as defined in Asset.sol
 */
export type BaseAssetSubId = string
/**
 * Underlying currency of base asset (`ETH`, `BTC`, etc)
 */
export type BaseCurrency = string
/**
 * $ base fee added to every taker order
 */
export type BaseFee = string
/**
 * Amount of contracts / tokens available at best ask price
 */
export type BestAskAmount = string
/**
 * Best ask price
 */
export type BestAskPrice = string
/**
 * Amount of contracts / tokens available at best bid price
 */
export type BestBidAmount = string
/**
 * Best bid price
 */
export type BestBidPrice = string
/**
 * Latest borrow index as per `CashAsset.sol` implementation
 */
export type BorrowIndex = string
/**
 * Number of decimals of the underlying on-chain ERC20 token
 */
export type Decimals = number
/**
 * Latest supply index as per `CashAsset.sol` implementation
 */
export type SupplyIndex = string
/**
 * Address of underlying on-chain ERC20 (not V2 asset)
 */
export type UnderlyingErc20Address = string
/**
 * Minimum number of contracts that get filled using FIFO. Actual number of contracts that gets filled by FIFO will be the max between this value and (1 - pro_rata_fraction) x order_amount, plus any size leftovers due to rounding.
 */
export type FifoMinAllocation = string
/**
 * Total amount of contracts / tokens available at 5 percent above best ask price
 */
export type FivePercentAskDepth = string
/**
 * Total amount of contracts / tokens available at 5 percent below best bid price
 */
export type FivePercentBidDepth = string
/**
 * Index price
 */
export type IndexPrice = string
/**
 * Instrument name
 */
export type InstrumentName1 = string
/**
 * `erc20`, `option`, or `perp`
 */
export type InstrumentType = 'erc20' | 'option' | 'perp'
/**
 * If `True`: instrument is tradeable within `activation` and `deactivation` timestamps
 */
export type IsActive = boolean
/**
 * Percent of spot price fee rate for makers
 */
export type MakerFeeRate = string
/**
 * Mark price
 */
export type MarkPrice = string
/**
 * Percent of option price fee cap, e.g. 12.5%, null if not applicable
 */
export type MarkPriceFeeRateCap = string | null
/**
 * Maximum price at which an agressive buyer can be matched. Any portion of a market order that would execute above this price will be cancelled. A limit buy order with limit price above this value is treated as post only (i.e. it will be rejected if it would cross any existing resting order).
 */
export type MaxPrice = string
/**
 * Maximum valid amount of contracts / tokens per trade
 */
export type MaximumAmount = string
/**
 * Minimum price at which an agressive seller can be matched. Any portion of a market order that would execute below this price will be cancelled. A limit sell order with limit price below this value is treated as post only (i.e. it will be rejected if it would cross any existing resting order).
 */
export type MinPrice = string
/**
 * Minimum valid amount of contracts / tokens per trade
 */
export type MinimumAmount = string
/**
 * Current open interest for the margin type
 */
export type CurrentOpenInterest = string
/**
 * Total open interest cap
 */
export type InterestCap = string
/**
 * Unix timestamp of expiry date (in seconds)
 */
export type Expiry = number
/**
 * Underlying settlement price index
 */
export type Index = string
export type OptionType = 'C' | 'P'
/**
 * Settlement price of the option
 */
export type SettlementPrice = string | null
export type Strike = string
/**
 * Implied volatility of the current best ask
 */
export type AskIv = string
/**
 * Implied volatility of the current best bid
 */
export type BidIv = string
/**
 * Delta of the option
 */
export type Delta = string
/**
 * Discount factor used to calculate option premium
 */
export type DiscountFactor = string
/**
 * Forward price used to calculate option premium
 */
export type ForwardPrice = string
/**
 * Gamma of the option
 */
export type Gamma = string
/**
 * Implied volatility of the option
 */
export type Iv = string
/**
 * Mark price of the option
 */
export type MarkPrice1 = string
/**
 * Rho of the option
 */
export type Rho = string
/**
 * Theta of the option
 */
export type Theta = string
/**
 * Vega of the option
 */
export type Vega = string
/**
 * Latest aggregated funding as per `PerpAsset.sol`
 */
export type AggregateFunding = string
/**
 * Current hourly funding rate as per `PerpAsset.sol`
 */
export type FundingRate = string
/**
 * Underlying spot price index for funding rate
 */
export type Index1 = string
/**
 * Max rate per hour as per `PerpAsset.sol`
 */
export type MaxRatePerHour = string
/**
 * Min rate per hour as per `PerpAsset.sol`
 */
export type MinRatePerHour = string
/**
 * Static interest rate as per `PerpAsset.sol`
 */
export type StaticInterestRate = string
/**
 * Pro-rata fill share of every order is rounded down to be a multiple of this number. Leftovers of the order due to rounding are filled FIFO.
 */
export type ProRataAmountStep = string
/**
 * Fraction of order that gets filled using pro-rata matching. If zero, the matching is full FIFO.
 */
export type ProRataFraction = string
/**
 * Quote currency (`USD` for perps, `USDC` for options)
 */
export type QuoteCurrency = string
/**
 * Timestamp at which became or will become active (if applicable)
 */
export type ScheduledActivation = number
/**
 * Scheduled deactivation time for instrument (if applicable)
 */
export type ScheduledDeactivation = number
/**
 * Number of contracts traded during last 24 hours
 */
export type ContractVolume = string
/**
 * Highest trade price during last 24h
 */
export type High = string
/**
 * Lowest trade price during last 24h
 */
export type Low = string
/**
 * Number of trades during last 24h
 */
export type NumTrades = string
/**
 * Current total open interest
 */
export type OpenInterest1 = string
/**
 * 24-hour price change expressed as a percentage. Options: percent change in vol; Perps: percent change in mark price
 */
export type PercentChange = string
/**
 * 24-hour price change in USD.
 */
export type UsdChange = string
/**
 * Percent of spot price fee rate for takers
 */
export type TakerFeeRate = string
/**
 * Tick size of the instrument, i.e. minimum price increment
 */
export type TickSize = string
/**
 * Timestamp of the ticker feed snapshot
 */
export type Timestamp = number

export interface PublicGetTickerJSONRPCSchema {
  request: PublicGetTickerRequestSchema
  response: PublicGetTickerResponseSchema
}
export interface PublicGetTickerRequestSchema {
  httpMethod: HttpMethod
  id?: string | number
  method: Method
  params: PublicGetTickerParamsSchema
}
export interface PublicGetTickerParamsSchema {
  instrument_name: InstrumentName
}
export interface PublicGetTickerResponseSchema {
  id: string | number
  result: PublicGetTickerResultSchema
}
export interface PublicGetTickerResultSchema {
  amount_step: AmountStep
  base_asset_address: BaseAssetAddress
  base_asset_sub_id: BaseAssetSubId
  base_currency: BaseCurrency
  base_fee: BaseFee
  best_ask_amount: BestAskAmount
  best_ask_price: BestAskPrice
  best_bid_amount: BestBidAmount
  best_bid_price: BestBidPrice
  /**
   * Details of the erc20 asset (if applicable)
   */
  erc20_details: ERC20PublicDetailsSchema | null
  fifo_min_allocation: FifoMinAllocation
  five_percent_ask_depth: FivePercentAskDepth
  five_percent_bid_depth: FivePercentBidDepth
  index_price: IndexPrice
  instrument_name: InstrumentName1
  instrument_type: InstrumentType
  is_active: IsActive
  maker_fee_rate: MakerFeeRate
  mark_price: MarkPrice
  mark_price_fee_rate_cap?: MarkPriceFeeRateCap
  max_price: MaxPrice
  maximum_amount: MaximumAmount
  min_price: MinPrice
  minimum_amount: MinimumAmount
  open_interest: OpenInterest
  /**
   * Details of the option asset (if applicable)
   */
  option_details: OptionPublicDetailsSchema | null
  /**
   * Greeks, forward price, iv and mark price of the instrument (options only)
   */
  option_pricing: OptionPricingSchema | null
  /**
   * Details of the perp asset (if applicable)
   */
  perp_details: PerpPublicDetailsSchema | null
  pro_rata_amount_step: ProRataAmountStep
  pro_rata_fraction: ProRataFraction
  quote_currency: QuoteCurrency
  scheduled_activation: ScheduledActivation
  scheduled_deactivation: ScheduledDeactivation
  stats: AggregateTradingStatsSchema
  taker_fee_rate: TakerFeeRate
  tick_size: TickSize
  timestamp: Timestamp
}
/**
 * Details of the erc20 asset (if applicable)
 */
export interface ERC20PublicDetailsSchema {
  borrow_index?: BorrowIndex
  decimals: Decimals
  supply_index?: SupplyIndex
  underlying_erc20_address?: UnderlyingErc20Address
}
/**
 * Margin type of subaccount (`PM` (Portfolio Margin) or `SM` (Standard Margin)) -> (current open interest, open interest cap)
 */
export interface OpenInterest {
  [k: string]: OpenInterestStatsSchema
}
export interface OpenInterestStatsSchema {
  current_open_interest: CurrentOpenInterest
  interest_cap: InterestCap
}
/**
 * Details of the option asset (if applicable)
 */
export interface OptionPublicDetailsSchema {
  expiry: Expiry
  index: Index
  option_type: OptionType
  settlement_price?: SettlementPrice
  strike: Strike
}
/**
 * Greeks, forward price, iv and mark price of the instrument (options only)
 */
export interface OptionPricingSchema {
  ask_iv: AskIv
  bid_iv: BidIv
  delta: Delta
  discount_factor: DiscountFactor
  forward_price: ForwardPrice
  gamma: Gamma
  iv: Iv
  mark_price: MarkPrice1
  rho: Rho
  theta: Theta
  vega: Vega
}
/**
 * Details of the perp asset (if applicable)
 */
export interface PerpPublicDetailsSchema {
  aggregate_funding: AggregateFunding
  funding_rate: FundingRate
  index: Index1
  max_rate_per_hour: MaxRatePerHour
  min_rate_per_hour: MinRatePerHour
  static_interest_rate: StaticInterestRate
}
/**
 * Aggregate trading stats for the last 24 hours
 */
export interface AggregateTradingStatsSchema {
  contract_volume: ContractVolume
  high: High
  low: Low
  num_trades: NumTrades
  open_interest: OpenInterest1
  percent_change: PercentChange
  usd_change: UsdChange
}
